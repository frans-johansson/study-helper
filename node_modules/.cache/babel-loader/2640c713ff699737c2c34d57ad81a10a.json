{"ast":null,"code":"import _classCallCheck from \"/Users/Marit/Desktop/projekt/study-helper/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Marit/Desktop/projekt/study-helper/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Marit/Desktop/projekt/study-helper/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Marit/Desktop/projekt/study-helper/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Marit/Desktop/projekt/study-helper/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/Marit/Desktop/projekt/study-helper/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/Marit/Desktop/projekt/study-helper/src/Tests/Hubtest.js\";\nimport React, { Component } from 'react';\nimport './gameboard.css';\nimport Card from './card';\nimport fireflies from './firefly_characters.json';\nimport fools from './foolfly_characters.json';\nimport WelcomeScreen from './welcomeScreen';\nvar GameModes = {\n  FIREFLY: \"Firefly\",\n  FOOLFLY: \"Foolfly\"\n};\n\nvar Hubtest =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Hubtest, _Component);\n\n  function Hubtest(props) {\n    var _this;\n\n    _classCallCheck(this, Hubtest);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Hubtest).call(this, props));\n    _this.selectCard = _this.selectCard.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reStart = _this.reStart.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reset = _this.reset.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.startGame = _this.startGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getUserName = _this.getUserName.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.backToWelcome = _this.backToWelcome.bind(_assertThisInitialized(_assertThisInitialized(_this))); //Initiate the state\n\n    _this.state = {\n      cards: [],\n      gameLocked: false,\n      lastCardSelected: null,\n      numberOfMatches: 0,\n      mode: GameModes.FIREFLY,\n      user: null\n    };\n    return _this;\n  }\n\n  _createClass(Hubtest, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //We cant set the data in the constructor, so we set it once the component has mounted (loaded)    \n      this.setState({\n        cards: this.getData(this.state.mode)\n      });\n      console.log(\"componentDidMount - loaded data\");\n      console.log(this.state.cards);\n    }\n  }, {\n    key: \"selectCard\",\n    value: function selectCard(id) {\n      var _this2 = this;\n\n      //If the game is in locked state, ignore the click\n      if (this.state.gameLocked) {\n        return;\n      }\n\n      var cards = this.state.cards;\n      var selectedCard = cards[id]; //Because of how Javascript works objects made from other objects are created by reference\n      //hence updating selectedCard, will update the object in the cards array\n\n      selectedCard.isFlipped = true; //Update the state to trigger a re-render of the componenets, to flip the card\n\n      this.setState({\n        cards: cards,\n        gameLocked: true\n      }); //Check if there's a selected card stored \n\n      if (this.state.lastCardSelected === null) {\n        //If no card stored, store the currently selected one\n        this.setState({\n          lastCardSelected: selectedCard,\n          gameLocked: false\n        });\n      } else {\n        //If lastSelected is not null, then we compare the now selected card with the stored one\n        if (this.state.lastCardSelected.characterID === selectedCard.characterID) {\n          console.log(\"Match!\"); //Delay for 1 second, then mark the cards as matched\n\n          setTimeout(function () {\n            selectedCard.isMatched = true;\n            var lastCardSelected = _this2.state.lastCardSelected;\n            lastCardSelected.isMatched = true;\n            var numberOfMatches = _this2.state.numberOfMatches;\n            console.log(_this2.state.numberOfMatches);\n            console.log(numberOfMatches + 1);\n\n            _this2.setState({\n              cards: cards,\n              lastCardSelected: null,\n              gameLocked: false,\n              numberOfMatches: numberOfMatches + 1\n            });\n          }, 1000);\n        } else {\n          //If the cards dont macth\n          //Delay for 1 second, then flip back the cards\n          setTimeout(function () {\n            selectedCard.isFlipped = false;\n            var lastCardSelected = _this2.state.lastCardSelected;\n            lastCardSelected.isFlipped = false;\n\n            _this2.setState({\n              cards: cards,\n              lastCardSelected: null,\n              gameLocked: false\n            });\n          }, 1000);\n        }\n      }\n    }\n  }, {\n    key: \"startGame\",\n    value: function startGame(mode, user) {\n      this.setState({\n        user: user\n      });\n      this.reStart(mode);\n    }\n  }, {\n    key: \"getUserName\",\n    value: function getUserName(name) {\n      //Default to the normal name\n      var returnValue = name;\n      var nameToCheck = name.replace(/ /g, '').toLowerCase();\n\n      if (nameToCheck === \"afool\") {\n        returnValue = \"Fool\";\n      }\n\n      return returnValue;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var btnText = 'Reset';\n\n      if (this.state.numberOfMatches === this.state.cards.length / 2) {\n        btnText = 'You Win! Play Again?';\n      }\n\n      if (this.state.user === null) {\n        return React.createElement(WelcomeScreen, {\n          startGame: this.startGame,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"gameboard-text-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, \"Hello \", this.getUserName(this.state.user), \" have fun with \", this.state.mode, \" Memory \"), React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, \"Number of matches: \", this.state.numberOfMatches)), React.createElement(\"div\", {\n          className: \"gameboard-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, this.state.cards.map(function (card, index) {\n          return React.createElement(Card, {\n            key: index,\n            id: index,\n            isFlipped: card.isFlipped,\n            card: card,\n            selectCard: _this3.selectCard,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 144\n            },\n            __self: this\n          });\n        })), React.createElement(\"button\", {\n          className: \"restart-btn\",\n          onClick: this.reset,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }, btnText), React.createElement(\"button\", {\n          className: \"restart-btn\",\n          onClick: this.backToWelcome,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }, \"Back to Welcome Screen\"));\n      }\n    }\n  }, {\n    key: \"backToWelcome\",\n    value: function backToWelcome() {\n      window.location.reload();\n    }\n  }, {\n    key: \"reStart\",\n    value: function reStart(mode) {\n      this.setState({\n        gameLocked: false,\n        lastCardSelected: null,\n        numberOfMatches: 0,\n        mode: mode,\n        cards: this.getData(mode)\n      });\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.reStart(this.state.mode);\n    }\n  }, {\n    key: \"shuffleArray\",\n    value: function shuffleArray(array) {\n      var currentIndex = array.length,\n          temporaryValue,\n          randomIndex; // While there remain elements to shuffle...\n\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; // And swap it with the current element.\n\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData(mode) {\n      var items = [];\n\n      if (mode === GameModes.FIREFLY) {\n        console.log(\"get firefly data\");\n        items = fireflies;\n      } else {\n        console.log(\"get foolfly data\");\n        items = fools;\n      }\n\n      var itemList = [];\n      items.forEach(function (element) {\n        var newItem = {};\n        newItem.characterID = element.characterID;\n        newItem.image = element.image;\n        newItem.isFlipped = false;\n        newItem.isMatched = false;\n        itemList.push(newItem);\n        var mirrorItem = {};\n        mirrorItem.characterID = element.characterID;\n        mirrorItem.image = element.image;\n        mirrorItem.isFlipped = false;\n        newItem.isMatched = false;\n        itemList.push(mirrorItem);\n      });\n      items = this.shuffleArray(itemList);\n      console.log(items);\n      return items;\n    }\n  }]);\n\n  return Hubtest;\n}(Component);\n\nexport default Hubtest;","map":{"version":3,"sources":["/Users/Marit/Desktop/projekt/study-helper/src/Tests/Hubtest.js"],"names":["React","Component","Card","fireflies","fools","WelcomeScreen","GameModes","FIREFLY","FOOLFLY","Hubtest","props","selectCard","bind","reStart","reset","startGame","getUserName","backToWelcome","state","cards","gameLocked","lastCardSelected","numberOfMatches","mode","user","setState","getData","console","log","id","selectedCard","isFlipped","characterID","setTimeout","isMatched","name","returnValue","nameToCheck","replace","toLowerCase","btnText","length","map","card","index","window","location","reload","array","currentIndex","temporaryValue","randomIndex","Math","floor","random","items","itemList","forEach","element","newItem","image","push","mirrorItem","shuffleArray"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './gameboard.css';\nimport Card from './card';\nimport fireflies from './firefly_characters.json';\nimport fools from './foolfly_characters.json';\nimport WelcomeScreen from './welcomeScreen';\n\nconst GameModes = {FIREFLY:\"Firefly\",FOOLFLY:\"Foolfly\"}\n\nclass Hubtest extends Component{\n    \n    constructor(props){\n        super(props);\n\n        this.selectCard = this.selectCard.bind(this);\n        this.reStart = this.reStart.bind(this);\n        this.reset = this.reset.bind(this);\n        this.startGame = this.startGame.bind(this);\n        this.getUserName = this.getUserName.bind(this);\n        this.backToWelcome = this.backToWelcome.bind(this);\n\n        \n\n        //Initiate the state\n        this.state={\n            cards:[],\n            gameLocked: false,\n            lastCardSelected: null,\n            numberOfMatches: 0,\n            mode: GameModes.FIREFLY,\n            user: null\n        }\n    }\n\n    componentDidMount(){\n        //We cant set the data in the constructor, so we set it once the component has mounted (loaded)    \n        this.setState({\n            cards: this.getData(this.state.mode)\n        })\n        console.log(\"componentDidMount - loaded data\");\n        console.log(this.state.cards);\n        \n        \n\n    }\n\n    selectCard(id){\n        //If the game is in locked state, ignore the click\n        if(this.state.gameLocked){\n            return;\n        }\n        var cards = this.state.cards;\n        let selectedCard = cards[id];\n        \n        //Because of how Javascript works objects made from other objects are created by reference\n        //hence updating selectedCard, will update the object in the cards array\n        selectedCard.isFlipped = true;  \n\n        //Update the state to trigger a re-render of the componenets, to flip the card\n        this.setState({cards, gameLocked: true});\n\n        //Check if there's a selected card stored \n        if (this.state.lastCardSelected === null) {\n            //If no card stored, store the currently selected one\n            this.setState({\n                lastCardSelected: selectedCard, gameLocked: false\n            })    \n\n        } else {\n            //If lastSelected is not null, then we compare the now selected card with the stored one\n            if (this.state.lastCardSelected.characterID === selectedCard.characterID) {\n                console.log(\"Match!\");\n                //Delay for 1 second, then mark the cards as matched\n                setTimeout(() => {\n                    selectedCard.isMatched = true;\n                    let lastCardSelected = this.state.lastCardSelected;\n                    lastCardSelected.isMatched = true;\n                    let numberOfMatches = this.state.numberOfMatches;\n                    console.log(this.state.numberOfMatches);\n\n                    console.log(numberOfMatches + 1);\n                    \n\n                    this.setState({cards, lastCardSelected: null, gameLocked: false, numberOfMatches: numberOfMatches + 1});\n                  }, 1000);            \n            }else {\n                //If the cards dont macth\n                //Delay for 1 second, then flip back the cards\n                setTimeout(() => {\n                    selectedCard.isFlipped = false; \n                    let lastCardSelected = this.state.lastCardSelected;\n                    lastCardSelected.isFlipped = false;\n                    this.setState({cards, lastCardSelected: null, gameLocked: false});\n                  }, 1000); \n                \n            }\n            \n        }\n    }\n\n    startGame(mode, user){\n        this.setState({user: user});\n\n        this.reStart(mode);\n\n\n\n    }\n\n    getUserName(name){\n        //Default to the normal name\n        let returnValue = name;\n\n        let nameToCheck = name.replace(/ /g,'').toLowerCase();\n        \n        if (nameToCheck === \"afool\") {\n            returnValue = \"Fool\";                   \n        }\n\n        return returnValue;\n    }\n\n\n    render(){\n\n        var btnText = 'Reset';\n        if (this.state.numberOfMatches === this.state.cards.length / 2) {\n          btnText = 'You Win! Play Again?';\n        }\n\n    if (this.state.user === null) {\n        return <WelcomeScreen startGame={this.startGame} />\n        \n    } else {\n        return (\n            <div>\n                <div className=\"gameboard-text-container\">\n                    <h1>Hello {this.getUserName(this.state.user)} have fun with {this.state.mode} Memory </h1>\n                    <h3>Number of matches: {this.state.numberOfMatches}</h3>\n                </div>           \n                <div className=\"gameboard-container\">\n                    {\n                        this.state.cards.map((card, index)=>{\n                            return <Card key={index} id={index} isFlipped={card.isFlipped} card={card} selectCard={this.selectCard} />\n                        })\n                    }                    \n                </div>\n                <button className=\"restart-btn\" onClick={this.reset}>{btnText}</button><button className=\"restart-btn\" onClick={this.backToWelcome}>Back to Welcome Screen</button>\n            </div>\n        )\n        }\n    }\n\n\n    backToWelcome(){\n        window.location.reload();\n    }\n\n    \n    reStart(mode){\n        this.setState({\n            gameLocked: false,\n            lastCardSelected: null,\n            numberOfMatches: 0,\n            mode: mode,\n            cards:this.getData(mode)\n        })\n    }\n\n    reset(){       \n        this.reStart(this.state.mode);\n    }\n\n    shuffleArray(array) {\n        var currentIndex = array.length, temporaryValue, randomIndex;\n      \n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n      \n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex -= 1;\n      \n          // And swap it with the current element.\n          temporaryValue = array[currentIndex];\n          array[currentIndex] = array[randomIndex];\n          array[randomIndex] = temporaryValue;\n        }\n      \n        return array;\n      }\n\n      getData(mode) {\n\n        let items= [];\n    \n        if (mode === GameModes.FIREFLY) {   \n            console.log(\"get firefly data\");     \n            items = fireflies;        \n        } else {\n            console.log(\"get foolfly data\");      \n            items = fools;\n        }\n        \n        let itemList = [];\n    \n        items.forEach(element => {\n            let newItem = {};\n            newItem.characterID = element.characterID;\n            newItem.image = element.image;\n            newItem.isFlipped = false;\n            newItem.isMatched = false;\n            itemList.push(newItem);\n    \n            let mirrorItem = {};\n            mirrorItem.characterID = element.characterID;\n            mirrorItem.image = element.image;\n            mirrorItem.isFlipped = false;\n            newItem.isMatched = false;\n            itemList.push(mirrorItem);\n        });\n    \n    \n        items = this.shuffleArray(itemList)\n\n        \n        console.log(items);\n    \n        return items;       \n    }\n\n\n\n\n}\nexport default Hubtest;"]},"metadata":{},"sourceType":"module"}